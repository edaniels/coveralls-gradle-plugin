buildscript {
    dependencies {
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.0'
    }
}

plugins {
    id "groovy"
    id "maven"
    id "eclipse"
    id "idea"
    id "signing"
    id "maven-publish"
    id "jacoco"
    id "com.github.kt3k.coveralls" version "2.5.0"
}

apply plugin: 'com.jfrog.bintray'

group 'org.edaniels.gradle.plugin'
version '2.8.2'

repositories {
    mavenCentral()
}

dependencies {
    compile localGroovy()
    compile gradleApi()

    compile 'org.codehaus.groovy.modules.http-builder:http-builder:0.7.1'
    compile 'org.apache.httpcomponents:httpmime:4.3'
    compile 'org.eclipse.jgit:org.eclipse.jgit:3.6.0.201412230720-r'

    testCompile 'junit:junit:4.11'
    testCompile 'org.mockito:mockito-all:1.9.5'
    testCompile 'com.github.tomakehurst:wiremock:1.18'
}

tasks.withType(JavaCompile) {
    sourceCompatibility = 1.7
    targetCompatibility = 1.7
}

tasks.withType(GroovyCompile) {
    sourceCompatibility = 1.7
    targetCompatibility = 1.7
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}

task groovydocJar(type: Jar, dependsOn: groovydoc) {
    classifier = 'javadoc'
    from 'build/docs/groovydoc'
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts {
    archives jar

    archives groovydocJar
    archives sourcesJar
}

// sign archives if signatory exists
if (signing.signatory) {

    signing {
        sign configurations.archives
    }

}


uploadArchives {
    repositories {
        mavenDeployer {

            // sign pom if signatory exists
            if (signing.signatory) {
                beforeDeployment {
                    signing.signPom(it)
                }
            }

            repository(url: System.getenv('MVN_REPO')) {

                // set authentication info if sonatypeUsername property is set
                if (project.hasProperty('sonatype.username')) {
                    authentication userName: project.'sonatype.username', password: project.'sonatype.password'
                }
            }

            // additional pom settings (for maven central requirement)
            pom.project {

                name 'Gradle Coveralls Plugin'
                description 'This plugin helps to upload coverage data to Coveralls'
                url 'https://github.com/kt3k/coveralls-gradle-plugin'

                scm {
                    url 'scm:git@github.com:kt3k/coveralls-gradle-plugin.git'
                    connection 'scm:git@github.com:kt3k/coveralls-gradle-plugin.git'
                    developerConnection 'scm:git@github.com:kt3k/coveralls-gradle-plugin.git'
                }

                licenses {
                    license {
                        name 'MIT License'
                        url 'https://raw.github.com/kt3k/coveralls-gradle-plugin/master/LICENSE'
                        distribution 'repo'
                    }
                }

                developers {
                    developer {
                        id 'kt3k'
                        name 'Yoshiya Hinosawa'
                    }
                    developer {
                        id 'gitu'
                        name 'Florian Schrag'
                    }
                }
            }
        }
    }
}

// MavenPublication settings
publishing {
    publications {
        plugin(MavenPublication) {
            from components.java
        }
    }
}


Properties properties = new Properties()
File file = project.rootProject.file('local.properties')
if (file.exists()) {
    properties.load(project.rootProject.file('local.properties').newDataInputStream())
}

def bintrayUser = properties.getProperty("publish.bintray.user", "")
def apiKey = properties.getProperty("publish.bintray.apiKey", "")
def gpgPassphrase = properties.getProperty("publish.bintray.gpgPassphrase", "")
def bintrayMavenSyncUser = properties.getProperty("publish.bintray.mavenSyncUser", "")
def mavenSyncPassword = properties.getProperty("publish.bintray.mavenSyncPassword", "")

bintray {
    user = bintrayUser
    key = apiKey
    publish = true
    override = true
    pkg {
        repo = 'gradle-plugins'
        name = 'coveralls-gradle-plugin'
        userOrg = 'edaniels'
        desc = 'Send coverage data to coveralls.io.'
        websiteUrl = 'https://github.com/edaneils/coveralls-gradle-plugin'
        issueTrackerUrl = 'https://github.com/edaneils/coveralls-gradle-plugin/issues'
        vcsUrl = 'https://github.com/edaneils/coveralls-gradle-plugin.git'
        licenses = ['MIT']
        labels = ['coveralls', 'coverage']
        publicDownloadNumbers = true
        version {
            name = '2.8.2'
            vcsTag = 'v2.8.2'
            attributes = [
                'gradle-plugin': 'com.github.kt3k.coveralls:org.edaniels.gradle.plugin:coveralls-gradle-plugin'
            ]
            released  = new Date()
            if (!gpgPassphrase.isEmpty()) {
                gpg {
                    sign = true
                    passphrase = gpgPassphrase
                }
            }
            if (!bintrayMavenSyncUser.isEmpty()) {
                mavenCentralSync {
                    sync = false
                    user = bintrayMavenSyncUser
                    password = mavenSyncPassword
                    close = '1'
                }
            }
        }
    }
    publications = ['plugin']
}
